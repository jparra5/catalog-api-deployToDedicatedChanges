<?xml version="1.0" encoding="UTF-8"?>

<xml-report name="AppScan Report" xmlExportVersion="2.3" technology="SAST">
<!-- Note: This dictionary includes text strings for a variety of XML reports. Not all strings apply to the current report. -->
<dictionary>
	<item id="InformationalSeverityIssues">Informational severity issues:</item>
	<item id="advisories">Advisories</item>
	<item id="alternates">Alternate Fix Suggestions</item>
	<item id="apiColon">API:</item>
	<item id="atLine">at line</item>
	<item id="call">Call</item>
	<item id="callerColon">Caller:</item>
	<item id="causesColon">Causes:</item>
	<item id="createdByAppScan">IBM Security Static Analyzer, Version:</item>
	<item id="createdByColon">Created by:</item>
	<item id="example">Example</item>
	<item id="exampleTraceColon">Example Trace:</item>
	<item id="executiveSummary">Summary</item>
	<item id="file">File</item>
	<item id="fixColon">Fix:</item>
	<item id="fixRecommendations">Issues</item>
	<item id="fixRecommendationsColon">Fix Groups:</item>
	<item id="goToTableOfContents">Go to Table of Contents</item>
	<item id="high">High</item>
	<item id="highSeverityIssues">High severity issues:</item>
	<item id="informational">Informational</item>
	<item id="introductionContent">This report includes important security information about your application.</item>
	<item id="issue">Issue</item>
	<item id="issueTypesColon">Issue Types:</item>
	<item id="issueTypesDiscovered">Issue Types</item>
	<item id="issues">Issues</item>
	<item id="issuesColon">Issues:</item>
	<item id="line">Line</item>
	<item id="lostSink">Lost Sink</item>
	<item id="low">Low</item>
	<item id="lowSeverityIssues">Low severity issues:</item>
	<item id="medium">Medium</item>
	<item id="mediumSeverityIssues">Medium severity issues:</item>
	<item id="method">Trace</item>
	<item id="noIssuesFound">No security issues discovered in the scan</item>
	<item id="none">None</item>
	<item id="notAValidator">Not a Validator</item>
	<item id="numberOfIssues">Number of Issues</item>
	<item id="of">of</item>
	<item id="operatingSystemColon">Scan type:</item>
	<item id="owasp">OWASP Top 10</item>
	<item id="owaspColon">OWASP:</item>
	<item id="preface">Sample Trace</item>
	<item id="referenceColon">Reference:</item>
	<item id="reportType">Static Analyzer Report</item>
	<item id="riskColon">Risk:</item>
	<item id="scanDateColon">Scan started:</item>
	<item id="scanFileNameColon">Scan file name:</item>
	<item id="scanNameColon">Scan name:</item>
	<item id="securityIssueSummary">Summary of security issues</item>
	<item id="securityRisks">Security Risks</item>
	<item id="securityRisksColon">Security Risks:</item>
	<item id="severityColon">Severity:</item>
	<item id="signature">Fix Recommendation</item>
	<item id="sink">Sink</item>
	<item id="sinkColon">Sink:</item>
	<item id="source">Source</item>
	<item id="sourceAndSink">Source and Sink</item>
	<item id="sourceColon">Source:</item>
	<item id="synopsisColon">Synopsis:</item>
	<item id="tableOfContents">Table of Contents</item>
	<item id="taint">Tainted Arg</item>
	<item id="taintPropagator">Taint Propagator</item>
	<item id="testTechnicalDescriptionColon">Mitigation:</item>
	<item id="testTypeColon">Description:</item>
	<item id="textFixDescImpl">Implementation of {0}</item>
	<item id="textFixDescUse">Usage of {0} via {1}</item>
	<item id="textFixGrp">Fix Group #{0}: {1}</item>
	<item id="textFixIntro1a">This section groups {0} issues of type {1} with significant commonality in the their traces.</item>
	<item id="textFixIntro1b">This section groups {0} issues with significant commonality in their traces. The following issue types are included:</item>
	<item id="textFixIntro2">These issues are grouped together to try to help you find a common fix that resolves them all.</item>
	<item id="textFixRecImpl">This method is a part of the application code and appears in each of the grouped issue's traces. You should begin investigating a possible fix in the implementation of the method.</item>
	<item id="textFixRecUse">This method is a third-party API, with a common caller in each of the grouped issue's traces. You should begin investigating a possible fix at that caller.</item>
	<item id="textFixSigAlt">These method calls are also common to the traces of the issues in this group. They represent other possible locations to investigate a fix.</item>
	<item id="textFixUngrp1a">All {0} issues in this report appear to be independent, lacking the commonality required in their traces to be grouped together. They all appear in this section.</item>
	<item id="textFixUngrp1b">This section lists the remaining {0} issues that could not be included in any other fix groups.</item>
	<item id="textFixUngrp2">The following issue types are included:</item>
	<item id="totalIssuesInScanColon">Total security issues:</item>
	<item id="trialVersionHeader">Please Note:</item>
	<item id="trialVersionMessage">This summary report was created with the Application Security Analyzer Free Plan. Once you purchase the full service you will have access to a complete report with detailed descriptions of the issues found and how to remediate them.</item>
	<item id="trialVersionWatermark">Free Plan</item>
	<item id="ungrouped">Ungrouped</item>
	<item id="via">via</item>
	<item id="virtualLostSink">Virtual Lost Sink</item>
	<item id="xForceColon">X-Force:</item>
</dictionary>
<layout>
	<title>Static Analyzer Report</title>
	<report-type>Static Analyzer Report</report-type>
	<item>
		<description>This report includes important security information about your application.</description>
	</item>
	<company-logo-path />
	<additional-logo-path />
	<margins>0</margins>
	<node-path />
	<coverage>FullReport</coverage>
</layout>
<content>
	<executive-summary>1</executive-summary>
	<issues>0</issues>
	<table-of-content>0</table-of-content>
	<introduction>1</introduction>
	<by-url>0</by-url>
	<fix-recommendations>1</fix-recommendations>
	<variants>1</variants>
	<request-response>0</request-response>
	<differences>0</differences>
	<advisories>1</advisories>
	<coverage-issue-types>0</coverage-issue-types>
	<coverage-activities>0</coverage-activities>
	<issue-information>1</issue-information>
	<page-break-after-each-issue-url>0</page-break-after-each-issue-url>
	<cover-page>1</cover-page>
	<preface>1</preface>
</content>
<preface>
	<sample-trace>
		<call-trace>
			<call-invocation signature="com.ibm.security.appscan.altoromutual.servlet.AdminServlet.doPost(HttpServletRequest;HttpServletResponse):void" type="None">
				<call-invocation signature="javax.servlet.ServletRequest.getParameter(String):String" type="Source" filename="com.ibm.security.appscan.altoromutual.servlet.AdminServlet:90">
					<context>
						<![CDATA[username = request.]]>
						<highlight><![CDATA[getParameter]]></highlight>
						<![CDATA[("username")]]>
					</context>
				</call-invocation>
				<call-invocation signature="com.ibm.security.appscan.altoromutual.util.DBUtil.changePassword(String;String):String" type="None" filename="com.ibm.security.appscan.altoromutual.servlet.AdminServlet:103" alternate="true">
					<context>
						<![CDATA[error = changePassword(]]>
						<highlight><![CDATA[username]]></highlight>
						<![CDATA[, password1)]]>
					</context>
					<call-invocation signature="java.lang.StringBuilder.append(String):StringBuilder" type="NotAValidator" filename="com.ibm.security.appscan.altoromutual.util.DBUtil:408" fix="FIX: 11">
						<context>
							<![CDATA[new StringBuilder().append(password).append("' WHERE USER_ID = '").append(]]>
							<highlight><![CDATA[username]]></highlight>
							<![CDATA[)]]>
						</context>
					</call-invocation>
					<call-invocation signature="java.lang.StringBuilder.append(String):StringBuilder" type="NotAValidator" filename="com.ibm.security.appscan.altoromutual.util.DBUtil:408" fix="FIX: 11">
						<context>
							<highlight><![CDATA[new StringBuilder().append(password).append("' WHERE USER_ID = '").append(username)]]></highlight>
							<![CDATA[.append("'")]]>
						</context>
					</call-invocation>
					<call-invocation signature="java.lang.StringBuilder.toString():String" type="NotAValidator" filename="com.ibm.security.appscan.altoromutual.util.DBUtil:408" alternate="true">
						<context>
							<highlight><![CDATA[new StringBuilder().append(password).append("' WHERE USER_ID = '").append(username).append("'")]]></highlight>
							<![CDATA[.toString()]]>
						</context>
					</call-invocation>
					<call-invocation signature="java.sql.Statement.execute(String):boolean" type="Sink" filename="com.ibm.security.appscan.altoromutual.util.DBUtil:408">
						<context>
							<![CDATA[statement.execute(]]>
							<highlight><![CDATA[new StringBuilder().append(password).append("' WHERE USER_ID = '").append(username).append("'").toString()]]></highlight>
							<![CDATA[)]]>
						</context>
					</call-invocation>
				</call-invocation>
			</call-invocation>
		</call-trace>
		<trace-doc>
			<trace-placeholder />
			<p>This trace displays the flow of tainted data through a section of an application that contains an SQL Injection vulnerability. The code in question does not validate or sanitize data that originates from the untrusted source, leaving the door open for attackers to target the application's database.</p>
			<p>
				In this sample trace, the
				<code>doPost</code>
				servlet method calls
				<code>request.getParameter</code>
				. This method reads untrusted data (the user name) from the
				<code>HTTP POST</code>
				body, but it does not check the validity of the data, nor does it sanitize the data. This unverified, or tainted, data is then passed to the
				<code>changePassword</code>
				method. This method eventually passes the tainted data to the
				<code>statement.execute</code>
				method, where the vulnerability can be exploited.
			</p>
			<p>The trace provides this information:</p>
			<ul>
				<trace-li>
					<code>Request.getParameter("username")</code>
					is marked as a source (
					<trace-icon type="Source" />
					). Its return value is the origin of untrusted data.
				</trace-li>
				<trace-li>
					<code>Statement.execute(…)</code>
					has its first parameter marked as a sink (
					<trace-icon type="Sink" />
					), as tainted data (which contains malicious SQL commands) could be passed to the
					<code>sql</code>
					parameter without being validated or sanitized.
				</trace-li>
				<trace-li>
					<code>StringBuilder().append(…)</code>
					is marked as a taint propagator (
					<trace-icon type="TaintProp" />
					), as it simply acts as a conduit to pass tainted data from one point (the first parameter) to another (the return value).
				</trace-li>
				<trace-li>
					The flow of tainted data is marked in red. The taint begins at
					<code>request.getParameter</code>
					and passes tainted data to the
					<code>username</code>
					variable. The data is then passed through the taint propagators, until it is appended to an SQL statement and executed by the
					<code>statement.execute</code>
					method.
				</trace-li>
				<trace-li>
					Each node in the trace provides the line number in the code at which the trace occurs, along with the code snippet of interest. For example, the source (
					<trace-icon type="Source" />
					) occurs at line 90.
				</trace-li>
				<trace-li>At the left of the trace, blue bars indicate the locations where a fix can be implemented in order to remove the security vulnerability. In this example, data validation and/or sanitization should be added close to the sink where the tainted data is appended to the SQL statement. A much better solution would be to properly execute this SQL query as a prepared statement.</trace-li>
				<trace-li>
					In this example, the darker blue bars on the left have highlighted a method that is common to the trace of multiple issues. This is called a
					<i>fix group</i>
					and it denotes a location in the code that, if addressed, may resolve more than one issue. It is therefore suggested that fix groups be investigated first. In this trace example, the location at which
					<code>append()</code>
					is being called should be investigated first for this particular issue.
					<p>In the report, issues are listed by fix groups, if possible. Within each fix group, issue types are listed, followed by the individual issues for each type and the trace for each issue. There are two types of fix recommendations:</p>
					<ul>
						<li>
							If the fix is for a method that is a part of the application code, it will be recommended that you fix the
							<i>implementation</i>
							of the code.
						</li>
						<li>
							If the fix is for a location that calls third-party code, it will be recommended that you fix the
							<i>usage</i>
							of the code.
						</li>
					</ul>
				</trace-li>
			</ul>
		</trace-doc>
	</sample-trace>
</preface>
<advisory-group />
<issue-type-group maxIssuesPerIssueType="0" />
<fix-recommendation-group maxIssuesPerFixRecommendation="0" />
<scan-information>
	<scan-name>Weather Application-1472248725-0</scan-name>
	<scan-file-name>j_2016-08-26_17-02-36.irx</scan-file-name>
	<scan-date-and-time-iso>2016-08-26T22:05:33+0000</scan-date-and-time-iso>
	<scan-date-and-time>August 26, 2016 22:05:33 UTC</scan-date-and-time>
	<product-name>IBM Application Security On Cloud</product-name>
	<product-version>1.0</product-version>
	<test-policy-name>standard</test-policy-name>
	<application-id-name>Weather Application-1472248725-0</application-id-name>
	<engine-version>6.0.920</engine-version>
</scan-information>
<issue-group total="0" />
<cause-group />
<security-risk-group maxIssuesPerSecurityRisk="0" />
<scan-summary>
	<exit-status>SUCCESS</exit-status>
	<scan-duration>13962 ms</scan-duration>
	<highest-severity-id>-1</highest-severity-id>
	<final-report-revision>0001</final-report-revision>
</scan-summary>
</xml-report>